x-airflow-env: &airflow-env
  TMPDIR: /opt/airflow/tmp
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
  AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: utc
  AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
  AIRFLOW__METRICS__STATSD_ON : 'True'
  AIRFLOW__METRICS__STATSD_HOST : statsd-exporter
  AIRFLOW__METRICS__STATSD_PORT : 9125
  AIRFLOW__METRICS__STATSD_PREFIX : airflow
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
  AIRFLOW__LOGGING__REMOTE_LOGGING: 'False'

  

services:
  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:v1
    container_name: airflow-main
    restart: always
    environment: *airflow-env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - /mnt/nfs/dumps-clouddumps1001.wikimedia.org/other/mediawiki_history:/opt/airflow/mediawiki_history
      - ./logs:/opt/airflow/logs

    ports:
      - "8080:8080"
      - "8000:8000"
    command: webserver
    depends_on:
      - airflow_init

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:v1
    restart: always
    environment: *airflow-env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - /mnt/nfs/dumps-clouddumps1001.wikimedia.org/other/mediawiki_history:/opt/airflow/mediawiki_history
      - ./logs:/opt/airflow/logs
      - ./airflow-tmp:/opt/airflow/tmp

    command: scheduler
    depends_on:
      - airflow_init

  airflow_init:
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:v1
    restart: on-failure
    environment: *airflow-env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - /mnt/nfs/dumps-clouddumps1001.wikimedia.org/other/mediawiki_history:/opt/airflow/mediawiki_history
      - ./logs:/opt/airflow/logs
    entrypoint: >
      /bin/bash -c "
      airflow db init &&
      airflow users create --username ${AIRFLOW_USER} --password ${AIRFLOW_PASSWORD} --firstname Andrea --lastname Denina --role Admin --email andredeninaf@gmail.com
      "
    depends_on:
      - postgres

  postgres:
      image: postgres:15
      container_name: postgres
      restart: always
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - ./postgres-data:/var/lib/postgresql/data
        - ./init_multidb.sql:/docker-entrypoint-initdb.d/init-multidb.sql
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U airflow"]
        interval: 10s
        retries: 5

  prometheus:
      image: prom/prometheus:v2.53.5
      container_name: prometheus
      volumes:
        - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"

  grafana:
      image: grafana/grafana:12.0.2
      container_name: grafana
      ports:
        - "3000:3000"
      volumes:
        - ./grafana-data:/var/lib/grafana
        - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
        - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      environment:
        - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
        - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        - GF_INSTALL_PLUGINS=grafana-piechart-panel

  statsd-exporter:
    image: prom/statsd-exporter:v0.27.2
    volumes:
      - ./monitoring/statsd.yaml:/etc/statsd.yaml
    entrypoint: ["/bin/sh", "-c", "--"]
    command: ["statsd_exporter --log.level debug --statsd.mapping-config=//etc/statsd.yaml"]
    ports:
      - 9102:9102   # scrape port
      - 9125:9125   # ingest port
    restart: always

  dash-app:
    build:
      context: ./dashboards
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      - postgres
    ports:
      - "8050:8050"
